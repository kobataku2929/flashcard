import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react-native';
import { Alert } from 'react-native';
import { CardActions } from '@/components/CardActions';
import { Flashcard } from '@/types';

// Mock Alert
jest.spyOn(Alert, 'alert');

const mockFlashcard: Flashcard = {
  id: 1,
  word: 'hello',
  wordPronunciation: 'h…ôÀàlo ä',
  translation: '„Åì„Çì„Å´„Å°„ÅØ',
  translationPronunciation: '„Åì„Çì„Å´„Å°„ÅØ',
  memo: 'This is a greeting',
  folderId: null,
  createdAt: new Date(),
  updatedAt: new Date(),
};

describe('CardActions', () => {
  const defaultProps = {
    flashcard: mockFlashcard,
    onEdit: jest.fn(),
    onDelete: jest.fn(),
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should render flashcard information', () => {
    const { getByText } = render(<CardActions {...defaultProps} />);

    expect(getByText('hello')).toBeTruthy();
    expect(getByText('„Åì„Çì„Å´„Å°„ÅØ')).toBeTruthy();
    expect(getByText('This is a greeting')).toBeTruthy();
  });

  it('should render flashcard without memo', () => {
    const flashcardWithoutMemo = { ...mockFlashcard, memo: undefined };
    const { getByText, queryByText } = render(
      <CardActions {...defaultProps} flashcard={flashcardWithoutMemo} />
    );

    expect(getByText('hello')).toBeTruthy();
    expect(getByText('„Åì„Çì„Å´„Å°„ÅØ')).toBeTruthy();
    expect(queryByText('This is a greeting')).toBeNull();
  });

  it('should call onEdit when edit button is pressed', () => {
    const onEdit = jest.fn();
    const { getByText } = render(
      <CardActions {...defaultProps} onEdit={onEdit} />
    );

    fireEvent.press(getByText('‚úèÔ∏è Á∑®ÈõÜ'));
    expect(onEdit).toHaveBeenCalledWith(mockFlashcard);
  });

  it('should show move button when onMove is provided', () => {
    const onMove = jest.fn();
    const { getByText } = render(
      <CardActions {...defaultProps} onMove={onMove} />
    );

    expect(getByText('üìÅ ÁßªÂãï')).toBeTruthy();
  });

  it('should not show move button when onMove is not provided', () => {
    const { queryByText } = render(<CardActions {...defaultProps} />);

    expect(queryByText('üìÅ ÁßªÂãï')).toBeNull();
  });

  it('should call onMove when move button is pressed', () => {
    const onMove = jest.fn();
    const { getByText } = render(
      <CardActions {...defaultProps} onMove={onMove} />
    );

    fireEvent.press(getByText('üìÅ ÁßªÂãï'));
    expect(onMove).toHaveBeenCalledWith(mockFlashcard);
  });

  it('should show delete confirmation dialog when delete button is pressed', () => {
    const { getByText } = render(<CardActions {...defaultProps} />);

    fireEvent.press(getByText('üóëÔ∏è ÂâäÈô§'));

    expect(getByText('ÂçòË™û„Ç´„Éº„Éâ„ÇíÂâäÈô§')).toBeTruthy();
    expect(getByText('„Äåhello„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\n„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ')).toBeTruthy();
  });

  it('should call onDelete when deletion is confirmed', async () => {
    const onDelete = jest.fn().mockResolvedValue(undefined);
    const { getByText } = render(
      <CardActions {...defaultProps} onDelete={onDelete} />
    );

    // Open delete dialog
    fireEvent.press(getByText('üóëÔ∏è ÂâäÈô§'));

    // Confirm deletion
    fireEvent.press(getByText('ÂâäÈô§'));

    await waitFor(() => {
      expect(onDelete).toHaveBeenCalledWith(mockFlashcard);
    });
  });

  it('should close dialog when deletion is cancelled', () => {
    const { getByText, queryByText } = render(<CardActions {...defaultProps} />);

    // Open delete dialog
    fireEvent.press(getByText('üóëÔ∏è ÂâäÈô§'));
    expect(getByText('ÂçòË™û„Ç´„Éº„Éâ„ÇíÂâäÈô§')).toBeTruthy();

    // Cancel deletion
    fireEvent.press(getByText('„Ç≠„É£„É≥„Çª„É´'));

    // Dialog should be closed
    expect(queryByText('ÂçòË™û„Ç´„Éº„Éâ„ÇíÂâäÈô§')).toBeNull();
  });

  it('should show error alert when deletion fails', async () => {
    const onDelete = jest.fn().mockRejectedValue(new Error('Delete failed'));
    const { getByText } = render(
      <CardActions {...defaultProps} onDelete={onDelete} />
    );

    // Open delete dialog and confirm
    fireEvent.press(getByText('üóëÔ∏è ÂâäÈô§'));
    fireEvent.press(getByText('ÂâäÈô§'));

    await waitFor(() => {
      expect(Alert.alert).toHaveBeenCalledWith(
        '„Ç®„É©„Éº',
        'ÂçòË™û„Ç´„Éº„Éâ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ'
      );
    });
  });

  it('should show loading state during deletion', async () => {
    const onDelete = jest.fn(() => new Promise(resolve => setTimeout(resolve, 100)));
    const { getByText } = render(
      <CardActions {...defaultProps} onDelete={onDelete} />
    );

    // Open delete dialog and confirm
    fireEvent.press(getByText('üóëÔ∏è ÂâäÈô§'));
    fireEvent.press(getByText('ÂâäÈô§'));

    expect(getByText('ÂâäÈô§‰∏≠...')).toBeTruthy();
  });

  it('should handle long text content', () => {
    const longTextFlashcard = {
      ...mockFlashcard,
      word: 'This is a very long word that should be truncated',
      translation: '„Åì„Çå„ÅØÈùûÂ∏∏„Å´Èï∑„ÅÑÁøªË®≥„ÉÜ„Ç≠„Çπ„Éà„ÅßÂàá„ÇäË©∞„ÇÅ„Çâ„Çå„Çã„Åπ„Åç„Åß„Åô',
      memo: 'This is a very long memo that should be truncated after two lines. '.repeat(5),
    };

    const { getByText } = render(
      <CardActions {...defaultProps} flashcard={longTextFlashcard} />
    );

    expect(getByText('This is a very long word that should be truncated')).toBeTruthy();
    expect(getByText('„Åì„Çå„ÅØÈùûÂ∏∏„Å´Èï∑„ÅÑÁøªË®≥„ÉÜ„Ç≠„Çπ„Éà„ÅßÂàá„ÇäË©∞„ÇÅ„Çâ„Çå„Çã„Åπ„Åç„Åß„Åô')).toBeTruthy();
  });

  it('should apply custom style', () => {
    const customStyle = { marginTop: 20 };
    const { getByTestId } = render(
      <CardActions 
        {...defaultProps} 
        style={customStyle}
        testID="card-actions"
      />
    );

    // Note: Testing style application would require more complex setup
    // This is a placeholder for style testing
  });

  it('should handle special characters in flashcard content', () => {
    const specialCharFlashcard = {
      ...mockFlashcard,
      word: 'caf√© & r√©sum√©',
      translation: '„Ç´„Éï„Çß & Â±•Ê≠¥Êõ∏',
      memo: 'Special chars: @#$%^&*()_+{}|:"<>?[]\\;\',./',
    };

    const { getByText } = render(
      <CardActions {...defaultProps} flashcard={specialCharFlashcard} />
    );

    expect(getByText('caf√© & r√©sum√©')).toBeTruthy();
    expect(getByText('„Ç´„Éï„Çß & Â±•Ê≠¥Êõ∏')).toBeTruthy();
    expect(getByText('Special chars: @#$%^&*()_+{}|:"<>?[]\\;\',./')).toBeTruthy();
  });
});